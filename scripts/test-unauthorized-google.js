// Script de test pour email Google non autoris√©
// √Ä ex√©cuter dans la console du navigateur

async function testUnauthorizedGoogle() {
  console.log('üß™ Test avec email Google non autoris√©...');
  
  const unauthorizedEmails = [
    'random@gmail.com',
    'test@unauthorized.com',
    'user@example.com',
    'demo@gmail.com'
  ];
  
  for (const email of unauthorizedEmails) {
    console.log(`\nüìß Test de l'email non autoris√©: ${email}`);
    
    try {
      const response = await fetch('/api/auth/check-email', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email })
      });
      
      const data = await response.json();
      
      if (response.ok) {
        if (data.isAuthorized) {
          console.log(`‚ö†Ô∏è  ${email} - AUTORIS√â (inattendu)`);
        } else {
          console.log(`‚úÖ ${email} - NON AUTORIS√â (comportement attendu)`);
          console.log('üí° Ce email serait refus√© lors de la connexion Google');
        }
      } else {
        console.log(`‚ùå Erreur pour ${email}:`, data.error);
      }
      
    } catch (error) {
      console.error(`‚ùå Erreur pour ${email}:`, error);
    }
  }
}

// Simulation du processus complet
async function simulateUnauthorizedGoogleSignIn() {
  console.log('\nüß™ Simulation connexion Google non autoris√©e...');
  
  const testEmail = 'random@gmail.com';
  console.log(`üìß Email de test: ${testEmail}`);
  
  try {
    // √âtape 1: Connexion Google (simul√©e)
    console.log('1Ô∏è‚É£ Connexion Google r√©ussie (simulation)');
    
    // √âtape 2: V√©rification de l'email
    console.log('2Ô∏è‚É£ V√©rification de l\'email autoris√©...');
    const response = await fetch('/api/auth/check-email', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: testEmail })
    });
    
    const data = await response.json();
    
    if (response.ok && data.isAuthorized) {
      console.log('‚úÖ Acc√®s autoris√© - Utilisateur connect√©');
      return true;
    } else {
      console.log('‚ùå Acc√®s refus√© - Utilisateur d√©connect√©');
      console.log('üí° Message d\'erreur: Cet email Google n\'est pas autoris√© √† acc√©der √† la plateforme.');
      console.log('üí° Action: L\'utilisateur est automatiquement d√©connect√©');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la simulation:', error);
    return false;
  }
}

// Instructions pour tester manuellement
function showManualTestInstructions() {
  console.log('\nüìã Instructions pour test manuel :');
  console.log('1. Se d√©connecter si connect√©');
  console.log('2. Cliquer "Se connecter avec Google"');
  console.log('3. Se connecter avec un compte Google diff√©rent');
  console.log('4. V√©rifier que l\'acc√®s est refus√© si l\'email n\'est pas autoris√©');
  console.log('5. V√©rifier le message d\'erreur appropri√©');
}

// Fonctions disponibles dans la console
if (typeof window !== 'undefined') {
  window.testUnauthorizedGoogle = testUnauthorizedGoogle;
  window.simulateUnauthorizedGoogleSignIn = simulateUnauthorizedGoogleSignIn;
  window.showManualTestInstructions = showManualTestInstructions;
  
  console.log('üß™ Scripts de test email non autoris√© disponibles :');
  console.log('  - testUnauthorizedGoogle() : Test de plusieurs emails non autoris√©s');
  console.log('  - simulateUnauthorizedGoogleSignIn() : Simulation compl√®te');
  console.log('  - showManualTestInstructions() : Instructions pour test manuel');
} 