// Script de test pour la restriction Google
// √Ä ex√©cuter dans la console du navigateur

async function testGoogleRestriction() {
  console.log('üß™ Test de la restriction Google...');
  
  // Simuler la v√©rification d'un email Google
  const testEmails = [
    'scapworkspace@gmail.com', // Admin - devrait √™tre autoris√©
    'test@capgemini.com',      // Email ajout√© par admin - devrait √™tre autoris√©
    'random@gmail.com',        // Email Google non autoris√© - devrait √™tre refus√©
    'test@unauthorized.com'    // Email non autoris√© - devrait √™tre refus√©
  ];
  
  for (const email of testEmails) {
    console.log(`\nüìß Test de l'email Google: ${email}`);
    
    try {
      const response = await fetch('/api/auth/check-email', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email })
      });
      
      const data = await response.json();
      
      if (response.ok) {
        if (data.isAuthorized) {
          console.log(`‚úÖ ${email} - AUTORIS√â (connexion Google possible)`);
        } else {
          console.log(`‚ùå ${email} - NON AUTORIS√â (connexion Google refus√©e)`);
          console.log('üí° Message d\'erreur: Cet email Google n\'est pas autoris√© √† acc√©der √† la plateforme.');
        }
      } else {
        console.log(`‚ùå Erreur pour ${email}:`, data.error);
      }
      
    } catch (error) {
      console.error(`‚ùå Erreur pour ${email}:`, error);
    }
  }
}

// Simulation du processus de connexion Google
async function simulateGoogleSignIn(email) {
  console.log(`\nüß™ Simulation connexion Google avec: ${email}`);
  
  try {
    // √âtape 1: Connexion Google (simul√©e)
    console.log('1Ô∏è‚É£ Connexion Google r√©ussie');
    
    // √âtape 2: V√©rification de l'email
    console.log('2Ô∏è‚É£ V√©rification de l\'email autoris√©...');
    const response = await fetch('/api/auth/check-email', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email })
    });
    
    const data = await response.json();
    
    if (response.ok && data.isAuthorized) {
      console.log('‚úÖ Acc√®s autoris√© - Utilisateur connect√©');
      return true;
    } else {
      console.log('‚ùå Acc√®s refus√© - Utilisateur d√©connect√©');
      console.log('üí° Raison: Email non autoris√©');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la simulation:', error);
    return false;
  }
}

// Test de diff√©rents sc√©narios
async function testGoogleScenarios() {
  console.log('üß™ Test des sc√©narios Google...');
  
  // Sc√©nario 1: Email autoris√©
  console.log('\nüìã Sc√©nario 1: Email autoris√©');
  await simulateGoogleSignIn('scapworkspace@gmail.com');
  
  // Sc√©nario 2: Email non autoris√©
  console.log('\nüìã Sc√©nario 2: Email non autoris√©');
  await simulateGoogleSignIn('random@gmail.com');
  
  // Sc√©nario 3: Email ajout√© par admin
  console.log('\nüìã Sc√©nario 3: Email ajout√© par admin');
  await simulateGoogleSignIn('test@capgemini.com');
}

// Fonctions disponibles dans la console
if (typeof window !== 'undefined') {
  window.testGoogleRestriction = testGoogleRestriction;
  window.simulateGoogleSignIn = simulateGoogleSignIn;
  window.testGoogleScenarios = testGoogleScenarios;
  
  console.log('üß™ Scripts de test Google disponibles :');
  console.log('  - testGoogleRestriction() : Test de plusieurs emails Google');
  console.log('  - simulateGoogleSignIn(email) : Simulation connexion Google');
  console.log('  - testGoogleScenarios() : Test des diff√©rents sc√©narios');
} 